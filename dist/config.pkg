# Copyright (C) 2011-2012 G.P. Halkes
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

EXTENSIONS="c libtool pkgconfig verbose_compile pkgconfig_dep gettext lfs"
LTSHARED=1
DEFAULT_LINGUAS=nl
INSTALLDIRS="libdir docdir includedir"

test_select() {
	DESC="$1"
	shift
	clean_c
	for HEADER in "$@"
	do
		echo "#include <${HEADER}>"
	done > .config.c
	cat >> .config.c <<EOF
#include <stdlib.h>

int main(int argc, char *argv[]) {
	fd_set test;
	FD_ZERO(&test);
	FD_SET(0, &test);
	if (FD_ISSET(0, &test))
		FD_CLR(0, &test);
	select(1, &test, NULL, NULL, NULL);
	return 0;
}
EOF
	test_link "${DESC}"
}

config() {
	clean_c
	cat > .config.c << EOF
#include <stdio.h>
#include <termios.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
	struct termios attrs;
	FILE *foo = fdopen(argc, "r");
	isatty(argc);
	tcgetattr(argc, &attrs);
	tcsetattr(argc, TCSADRAIN, &attrs);
	dup(STDOUT_FILENO);
	return 0;
}
EOF
	test_link "fdopen/isatty/tcgetattr/tcsetattr/dup" || error "!! Some required functionality is not available. See config.log for details."

	clean_c
	cat > .config.c <<EOF
#include <sys/ioctl.h>
int main(int argc, char *argv[]) {
	struct winsize wsz;
	ioctl(argc, TIOCGWINSZ, &wsz);
	return 0;
}
EOF
	if test_link "TIOCGWINSZ ioctl" ; then
		CONFIGFLAGS="${CONFIGFLAGS} -DHAS_WINSIZE_IOCTL"
	else
		clean_c
		cat > .config.c <<EOF
#include <sys/ioctl.h>
int main(int argc, char *argv[]) {
	struct ttysize wsz;
	ioctl(argc, TIOCGSIZE, &wsz);
	return 0;
}
EOF
		test_link "TIOCGSIZE ioctl" && CONFIGFLAGS="${CONFIGFLAGS} -DHAS_SIZE_IOCTL"
	fi

	clean_c
	cat > .config.c <<EOF
#include <sys/ioctl.h>
#include <linux/tiocl.h>
#include <linux/keyboard.h>
int main(int argc, char *argv[]) {
	char cmd;
	ioctl(argc, TIOCLINUX, &cmd);
	return 0;
}
EOF
	if test_link "TIOCLINUX ioctl" ; then
		CONFIGFLAGS="${CONFIGFLAGS} -DHAS_TIOCLINUX"
	fi

	if test_select "select in <sys/select.h>" "sys/select.h" ; then
		CONFIGFLAGS="${CONFIGFLAGS} -DHAS_SELECT_H"
	else
		test_select "select in <unistd.h>" "sys/time.h" "sys/types.h" "unistd.h" || error "!! Can not find required select function."
	fi

	clean_c
	cat > .config.c <<EOF
#include <string.h>

int main(int argc, char *argv[]) {
	strdup(argv[0]);
	return 0;
}
EOF
	test_link "strdup" && CONFIGFLAGS="${CONFIGFLAGS} -DHAS_STRDUP"

	unset CURSES_LIBS CURSES_FLAGS
	clean_c
	cat > .config.c <<EOF
#include <stdio.h>
#include <stdlib.h>
#include <curses.h>
#include <term.h>

int main(int argc, char *argv[]) {
	int args[9], error, fd;

	if (setupterm(NULL, fd, &error) == OK) {
		tigetstr("cup");
		tigetnum("colors");
		tigetflag("km");
		tputs("\033[0m", 1, putchar);
		tparm("\033[0m", args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
	}
	return 0;
}
EOF
	if pkgconfig tinfo CURSES test_link PKGCONFIG_REQUIRES_PRIVATE; then
		:
	elif pkgconfig ncurses CURSES test_link PKGCONFIG_REQUIRES_PRIVATE ; then
		:
	elif test_compile "curses header file" ; then
		if test_link "terminfo access functions in -ltinfo" "TESTLIBS=-ltinfo" ; then
			CURSES_LIBS="-ltinfo"
		elif test_link "curses library in -lcurses" "TESTLIBS=-lcurses" ; then
			CURSES_LIBS="-lcurses"
		else
			if test_link "ncurses library in -lncurses" "TESTLIBS=-lncurses" ; then
				CURSES_LIBS="-lncurses"
			else
				error "!! Can not find curses/tinfo library. The curses/tinfo library is required to compile libt3window."
			fi
		fi
		PKGCONFIG_LIBS_PRIVATE="$PKGCONFIG_LIBS_PRIVATE ${CURSES_LIBS}"
	else
		error "!! Can not find curses/tinfo library. The curses/tinfo library is required to compile libt3window."
	fi

	clean_c
	cat > .config.c <<EOF
#include <transcript/transcript.h>

int main(int argc, char *argv[]) {
	transcript_get_version();
	return 0;
}
EOF

	pkgconfig libtranscript/0.2.2 LIBTRANSCRIPT test_link PKGCONFIG_REQUIRES_PRIVATE || \
		error "!! Can not find libtranscript. libtranscript is required to compile libt3window."

	clean_c
	cat > .config.c <<EOF
#include <unictype.h>
#include <uninorm.h>
#include <uniwidth.h>

int main(int argc, char *argv[]) {
	uint8_t buffer[10];
	size_t buffer_size = sizeof(buffer);
	size_t out_size;
	char nul = 0;
	u8_normalize(UNINORM_NFC, buffer, buffer_size, NULL, &out_size);
	uc_is_general_category_withtable(0x1234, UC_CATEGORY_MASK_M);
	uc_width(0x1234, &nul);
	return 0;
}
EOF
	test_link "libunistring" "TESTLIBS=-lunistring" || \
		error "!! Can not find libunistring library. Libunistring is required to compile libt3window."

	PKGCONFIG_DESC="Terminal windowing library"
	PKGCONFIG_VERSION="<VERSION>"
	PKGCONFIG_URL="http://os.ghalkes.nl/t3/libt3window.html"
	PKGCONFIG_CFLAGS="-I\${includedir}"
	PKGCONFIG_LIBS="-lt3window"
	PKGCONFIG_LIBS_PRIVATE="$PKGCONFIG_LIBS_PRIVATE -lunistring"

	gen_pkgconfig libt3window

	create_makefile "CONFIGFLAGS=${CONFIGFLAGS} ${LIBTRANSCRIPT_FLAGS} ${CURSES_FLAGS}" "CONFIGLIBS=${CONFIGLIBS} ${LIBTRANSCRIPT_LIBS} -lunistring ${CURSES_LIBS}"
}
